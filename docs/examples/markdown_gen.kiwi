/#
A script that generates a markdown file containing the definitions for the Kiwi Standard Library.
#/

try
  lib_path = env::kiwilib() # Path to the standard library.
  output_path = fs::combine(fs::cwd(), "kiwi-standard-library.md")
  markdown = [] # A list that will hold the markdown content.

  # Fail fast because if this ever happens, there's a serious problem.
  if !fs::exists(lib_path)
    throw "Cannot find the Kiwi Standard Library!!!"
  end

  # Add the title.
  markdown.push("# Kiwi Standard Library")
  markdown.push("This file was generated by Kiwi.")

  # Iterate over each file in path, and print the path and the content.
  for file in fs::listdir(lib_path) do
    # Skip non-Kiwi files.
    next when fs::ext(file) != ".kiwi"
    code = fs::read(file)
    package_name = null

    # Find the package name.
    for line in code.lines() do
      # We found the package, no need to continue looping.
      break when package_name

      # If the line begins with "package" and we have not identified the package.
      if line.trim().begins_with("package ") && !package_name
        package_name = line.replace("package", "").trim()
      # Some files in the standard library path contain only struct definitions: for example, `set` and `heap`.
      elsif line.trim().begins_with("struct ") && !package_name
        package_name = line.replace("struct ", "").trim()
      end
    end

    # This Kiwi file likely does not belong in the standard library path.
    if !package_name
      throw "Could not determine package in file: ${file}"
    end

    # Add a subtitle for this package. 
    markdown.push("## `${package_name}`")
    markdown.push("```\n${code}\n```")
  end

  # Combine the markdown array into a string.
  fs::write(output_path, markdown.join("\n"))
catch (err)
  println "An error occurred: ${err}"
end