fn main(args)
  grid_size = get_grid_size(args)

  if grid_size == null
    exit print_help()
  end

  rows = grid_size
  cols = grid_size

  global.y_range = [0 .. rows - 1]
  global.x_range = [0 .. cols - 1]

  grid = [[0] * cols] * rows
  randomize(grid, rows, cols)
  last_res = null

  while true do
    res = display(grid, rows, cols)
    println res
    if last_res == res
      randomize(grid, rows, cols)
    else
      update(grid, rows, cols)
    end

    last_res = res
  end
end

fn print_help()
  println "usage: kiwi life <integer_grid_size>"
end

fn get_grid_size(args)
  grid_size = null

  if args.empty()
    return null
  end

  try
    grid_size = args.get(0).to_int()
    grid_size = [grid_size, 20].max()
  end

  return grid_size
end

fn randomize(grid, rows, cols)
  for x in global.x_range do
    for y in global.y_range do
      grid[x][y] = math::random(0, 1)
    end
  end
end

fn display(grid, rows, cols)
  sys::exec("clear")
  len = rows - 1
  disp = [0] * len

  repeat len as i do
    disp.set(i - 1, grid[i - 1].join(" "))
  end

  return disp.join("\n").replace("0", " ").replace("1", "O")
end

fn set_cell(grid, rows, cols, x, y, state)
  if x >= 0 && x < rows && y >= 0 && y < cols
    grid[x][y] = state
  end
end

fn count_neighbor(grid, rows, cols, nx, ny)
  if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
    return (grid[nx][ny])
  end

  return 0
end

fn count_neighbors(grid, rows, cols, x, y)
  directions = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1]
  ]

  res = 0
  nx = null
  ny = null

  for direction in directions do
    nx = direction[0], ny = direction[1]
    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
      res += grid[nx][ny]
    end
  end

  return res
end

fn update(grid, rows, cols)
  for x in global.x_range do
    for y in global.y_range do
      live_neighbors = count_neighbors(grid, rows, cols, x, y)

      if grid[x][y] == 1 && (live_neighbors == 2 || live_neighbors == 3)
        grid[x][y] = 1
      elsif grid[x][y] == 0 && live_neighbors == 3
        grid[x][y] = 1
      else
        grid[x][y] = 0
      end
    end
  end
end

main(argv::get())