def main()
  rows = 20
  cols = 20
  grid = [[0] * cols] * rows
  randomize(grid, rows, cols)

  while true do
    println(display(grid, rows, cols))
    update(grid, rows, cols)
  end
end

def randomize(grid, rows, cols)
  xrange = [0 .. rows - 1]
  yrange = [0 .. cols - 1]

  for x in xrange do
    for y in yrange do
      grid[x][y] = __random__(0, 1)
    end
  end
end

def display(grid, rows, cols)
  __exec__("clear")
  disp = []

  i = 0, len = rows - 1

  while i < len do
    disp << grid[i].join(" ")
    i += 1
  end

  return disp.join("\n").replace("0", ".").replace("1", "O")
end

def set_cell(grid, rows, cols, x, y, state)
  if x >= 0 && x < rows && y >= 0 && y < cols
    grid[x][y] = state
  end
end

def count_neighbor(grid, rows, cols, nx, ny)
  res = 0

  if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
    res += (grid[nx][ny])
  end

  return res
end

def count_neighbors(grid, rows, cols, x, y)
  directions = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1]
  ]

  res = 0

  for direction in directions do
    nx = direction[0], ny = direction[1]
    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
      res += grid[nx][ny]
    end
  end

  return res
end

def update(grid, rows, cols)
  new_grid = grid.clone()
  
  for x in [0 .. rows - 1] do
    for y in [0 .. cols - 1] do
      live_neighbors = count_neighbors(grid, rows, cols, x, y)

      if new_grid[x][y] == 1 && (live_neighbors == 2 || live_neighbors == 3)
        new_grid[x][y] = 1
      elsif new_grid[x][y] == 0 && live_neighbors == 3
        new_grid[x][y] = 1
      else
        new_grid[x][y] = 0
      end
    end
  end

  grid = new_grid
end

main()