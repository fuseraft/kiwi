#!/usr/bin/kiwi

/#
MD5 hash generator.

usage: kiwi md5_hash <string>
#/

import "@kiwi/argv" as ARGV
import "@kiwi/fs" as fs
import "@kiwi/time" as time

def main()
  args = ARGV.get()
  
  if args.size() == 1
    println(MD5(args[0]))
  else
    # read the script contents
    text = fs.read("md5_hash.kiwi")

    # compute the hash and record duration
    ticks_start = time.ticks()
    md5_hash = MD5(text)
    ticks_stop = time.ticks()

    # print the results
    println("Computed MD5 hash of this file: ${md5_hash}")
    println("Time to compute: ${time.ticksms(ticks_stop - ticks_start) / 1000}s")
  end
end

def MD5(input)
  # All variables wrap modulo 2^32 when calculating:
  s = [0] * 64
  K = [0] * 64
  
  # s specifies the per-round shift amounts
  s[ 0:15] = [7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22]
  s[16:31] = [5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20]
  s[32:47] = [4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23]
  s[48:63] = [6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21]
  
  # Use binary integer part of the sines of integers (Radians) as constants:
  K[ 0: 3] = [ 0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ]
  K[ 4: 7] = [ 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ]
  K[ 8:11] = [ 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ]
  K[12:15] = [ 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ]
  K[16:19] = [ 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ]
  K[20:23] = [ 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ]
  K[24:27] = [ 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ]
  K[28:31] = [ 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ]
  K[32:35] = [ 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ]
  K[36:39] = [ 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ]
  K[40:43] = [ 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ]
  K[44:47] = [ 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ]
  K[48:51] = [ 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ]
  K[52:55] = [ 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ]
  K[56:59] = [ 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ]
  K[60:63] = [ 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 ]
  
  a0 = 0x67452301   # A
  b0 = 0xefcdab89   # B
  c0 = 0x98badcfe   # C
  d0 = 0x10325476   # D
  
  message = input.to_bytes()
  
  # Original message length in bits, mod 2^64
  original_bitlength = input.size() * 8

  # Append 0x80 (128 in decimal, 10000000 in binary) to the message
  message << 0x80
  
  # Pad with zeros until the message length in bytes is 56 mod 64
  while message.size() % 64 != 56 do
    message << 0x00
  end
  
  # Append the length in bits at the end of the buffer.
  for i in [0..7] do
    message << original_bitlength >> (i * 8)
  end
  
  chunk_size = 64  # 64 bytes = 512 bits
  num_chunks = message.size() / chunk_size
  
  for chunk_index in [0..num_chunks - 1] do
    # Extract the current chunk:
    start_index = chunk_index * chunk_size
    stop_index = start_index + chunk_size
    chunk = message[start_index:stop_index]
  
    # Break chunk into sixteen 32-bit words M[j], 0 ≤ j ≤ 15
    M = [0] * 16
    for j in [0..15] do
      start_chunk_index = j * 4
      stop_chunk_index = start_chunk_index + 4
      # Convert each 4-byte segment into an integer
      sub_chunk = chunk[start_chunk_index:stop_chunk_index]
      M[j] = (sub_chunk[3] << 24) | (sub_chunk[2] << 16) | (sub_chunk[1] << 8) | sub_chunk[0]
    end
  
    # Initialize hash value for this chunk:
    A = a0, B = b0, C = c0, D = d0
  
    # Main loop:
    for i in [0..63] do
      F = 0, g = 0
      
      if 0 <= i && i <= 15
        F = (B & C) | (~B & D)
        g = i
      elsif 16 <= i && i <= 31
        F = (D & B) | (~D & C)
        g = (5 * i + 1) % 16
      elsif 32 <= i && i <= 47
        F = B ^ C ^ D
        g = (3 * i + 5) % 16
      elsif 48 <= i && i <= 63
        F = C ^ (B | ~D)
        g = (7 * i) % 16
      end
  
      # Update the hash values
      temp = D
      D = C
      C = B
      B = B + left_rotate(A + F + K[i] + M[g], s[i])
      A = temp
    end

    # Add this chunk's hash to result so far:
    a0 += A
    b0 += B
    c0 += C
    d0 += D
  end

  digest        = [0] * 16
  digest[ 0: 3] = int_to_bytes(a0)
  digest[ 4: 7] = int_to_bytes(b0)
  digest[ 8:11] = int_to_bytes(c0)
  digest[12:15] = int_to_bytes(d0)

  return digest.to_hex()
end

def print_help()
  println("usage: kiwi md5_hash <input>")
  exit(0)
end

def left_rotate(value, count)
  adjusted_value = value & 0xFFFFFFFF
  return (adjusted_value << count | adjusted_value >> (32 - count)) & 0xFFFFFFFF
end

def int_to_bytes(num)
  num &= 0xFFFFFFFF
  return [num & 0xFF, (num >> 8) & 0xFF, (num >> 16) & 0xFF, (num >> 24) & 0xFF]
end

main()