import "config"

class Templatizer
  def initialize() end
  
  def render(template_name, view_name)
    templates = global.templates
    views = global.views
    html = templates[template_name].clone()
    html = html.replace("<%title%>", global.config.content.title)
    html = html.replace("<%favicon%>", global.config.content.favicon)
    return html.replace("<%content%>", views[view_name])
  end
end

fn load_templates()
  templatizer = Templatizer.new()
  templates = {}
  for t in global.config.content.templates do
    templates[t.name] = fs::read(t.path.replace("~", global.config.content.root))
  end
  global.templates = templates
  global.templatizer = templatizer
end

fn load_views()
  root = "${global.config.content.root}/views/"
  views = {}
  for v in fs::glob("${root}**/*.html") do
    view_name = v.replace(root, '').replace(".html", '')
    views[view_name] = fs::read(v)
  end
  global.views = views
end

fn load_controllers()
  root = "${global.config.content.root}/controllers/"
  packages = __rlist__().packages.clone()
  controllers = {}
  for c in fs::glob("${root}**/*.kiwi") do
    controller_name = c.replace(root, '').replace(".kiwi", '')
    controllers[controller_name] = c
    parse(fs::read(c))
  end
  global.controllers = controllers
end

fn load_public_content()
  public_content = global.config.content.public_content
  path = public_content.path.replace("~", global.config.content.root)
  web::public(public_content.endpoint, path)
end

fn listen()
  host = global.config.server.host
  port = global.config.server.port
  
  println("Server running at http://${host}:${port}")
  web::listen(host, port)
end

load_templates()
load_views()
load_controllers()
load_public_content()
listen()