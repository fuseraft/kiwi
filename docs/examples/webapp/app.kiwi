import "config"

struct Templatizer
  def new() end
  
  def render(template_name, view_name)
    templates = global.templates
    views = global.views
    html = templates[template_name].clone()
    html = html.replace("<%title%>", global.config.content.title)
    html = html.replace("<%favicon%>", global.config.content.favicon)
    return html.replace("<%content%>", views[view_name])
  end
end

fn load_templates()
  templates = {}
  for t in global.config.content.templates do
    templates[t.name] = fs::read(t.path.replace("~", global.config.content.root))
  end
  global.templates = templates
  global.templatizer = Templatizer.new()
end

fn load_views()
  root = "${global.config.content.root}/views/"
  views = {}
  for v in fs::glob("${root}**/*.html") do
    view_name = v.replace(root, '').replace(".html", '')
    views[view_name] = fs::read(v)
  end
  global.views = views
end

web::get(["/", "/index"], with (req) do
  println "hello"
  return web::ok("hello", "text/html")
  #return web::ok(global.templatizer.render("shared", "main"), "text/html")
end)

fn get_tmp_file()
  uid = string::base64encode(math::random_set(1, 10, 5).to_string())
  return fs::combine(fs::tmpdir(), "${uid}.kiwi")
end

web::post("/exec", with (req) do  
  file = get_tmp_file()
  fs::write(file, req.body)
  output = sys::execout("kiwi ${file}")
  fs::remove(file)
  return web::ok(output, "text/plaintext")
end)

fn load_public_content()
  public_content = global.config.content.public_content
  path = public_content.path.replace("~", global.config.content.root)
  web::public(public_content.endpoint, path)
end

fn listen()
  host = global.config.server.host
  port = global.config.server.port
  
  println("Server running at http://${host}:${port}")
  web::listen(host, port)
end

load_templates()
load_views()
load_public_content()
listen()