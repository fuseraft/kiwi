/#
@summary: Search a path for files with a given extension that contain specific strings.
          Print each file path containing matches followed by the lines they matched on. 

@param String target_path: The path to search.
@param String target_extension: The extension to filter to specific file types.
@param List target_strings: The list of strings to search for in the filtered files.
@return List: Returns a list of hashes containing paths and lists of lines.
#/
fn file_search(target_path, target_extension, target_strings = [])
  # This is the result.
  res_matches = []

  # Get a list of files in the target path (and all subdirectories) that end with a specific extension.
  filtered_files = fs::glob("${target_path}\\**\\*${target_extension}")

  /#
  @summary: A lambda for searching file content for target strings.
  @param String string_content: The content to search.
  @return Boolean: Returns `true` if the string content contains any of the target strings. 
  #/
  search_content = with (string_content) do
    for target in target_strings do
      return true when string_content.lowercase().contains(target.lowercase())
    end

    return false
  end

  # File paths with content containing target strings.
  files_with_matches = []

  # For each filtered file, search the file content for target strings.
  # If found, create a hash with path and content and add to list of files with matches.
  for file in filtered_files do
    content = fs::read(file)
    if search_content(content)
      files_with_matches.push({"path": file, "content": content.lines()})
    end
  end

  # For each file with matches, find the lines and add to results.
  for file in files_with_matches do
    # Create a result.
    res_match = {}
    res_match.path = file.path
    res_match.lines = []

    # For each line and line number, search the line for target strings, and if matched, add to result.
    for line, index in file.content do
      if search_content(line)
        res_match.lines.push({ 
          "line_no": index + 1, 
          "line_content": line.trim()
        })
      end
    end

    # Add the result to the list of results.
    res_matches.push(res_match)
  end

  return res_matches
end

# Run the file search.
file_search_results = file_search(
  "\\\\network_path\\to_search",    # search \\network_path\to_search
  ".config",                        # find .config files
  ["smtp", "mail"]                  # containing the strings "smtp" or "mail"
)

# Print the results.
for res in file_search_results do
  # Print the path to the file.
  println "${res.path}"
  
  # For each line and line number, print the line number followed by the line content string.
  for line in res.lines do
    println "${string::padstart(line.line_no, 6)}: ${line.line_content}"
  end

  # Print a new line to separate the results.
  println ""
end
