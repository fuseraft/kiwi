global.min_grid_size = 20

fn main(args)
  grid_size = get_grid_size(args)

  if grid_size == null
    exit print_help()
  end

  rows = grid_size
  cols = grid_size

  grid = [[0] * cols] * rows
  initialize(grid, rows, cols)

  while true do
    display(grid, rows, cols)
    update(grid, rows, cols)
  end
end

fn get_grid_size(args)
  grid_size = null

  try
    grid_size = args.get(0).to_integer()  

    if grid_size < global.min_grid_size
      grid_size = null
    end
  end
  
  return grid_size
end

fn print_help()
  println "usage: kiwi brain <int_grid_size>"
end

/#
Initializes cells to either 0 (off), 1 (on), or 2 (dying)
#/
fn initialize(grid, rows, cols)
  for x in [0 .. rows - 1] do
    for y in [0 .. cols - 1] do
      grid[x][y] = math::random(0, 2)
    end
  end
end

fn display(grid, rows, cols)
  __exec__("clear")
  len = rows - 1
  changed = false

  repeat len as i do
    row = [""] * cols

    for cell, j in grid[i - 1] do
      if cell == 0
        row.set(j, " ")
      elsif cell == 1
        row.set(j, "O")
        changed = true
      else
        row.set(j, "*")
        changed = true
      end
    end

    println row.join(" ")
  end

  if !changed
    initialize(grid, rows, cols)
  end
end

fn update(grid, rows, cols)
  x_range = [0 .. rows - 1]
  y_range = [0 .. cols - 1]
  
  for x in x_range do
    for y in y_range do
      current_state = grid[x][y]
      on_neighbors = count_on_neighbors(grid, rows, cols, x, y)

      if current_state == 0 && on_neighbors == 2
        grid[x][y] = 1  # off to on
      elsif current_state == 1
        grid[x][y] = 2  # on to dying
      else
        grid[x][y] = 0  # dying to off
      end
    end
  end
end

fn count_on_neighbors(grid, rows, cols, x, y)
  directions = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1]
  ]

  res = 0
  nx = null
  ny = null

  for direction in directions do
    nx = direction[0], ny = direction[1]
    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols)
      if grid[nx][ny] == 1
        res += 1
      end
    end
  end

  return res
end

main(argv::get())
