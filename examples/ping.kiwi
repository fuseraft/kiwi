package ping
  const ICMP_ECHO_REQUEST = 8
  const ICMP_CODE = 0

  /#
  @summary: Computes the checksum for an ICMP packet.
  @params:
    - `data`: A list of bytes to compute the checksum for.
  @return: The checksum as an integer.
  #/
  fn checksum(data: list): integer
    sum = 0
    length = data.size()


    ci = 0
    while ci < length - 2 do
      sum += (data[ci] << 8) + data[ci + 1]
      ci += 2
    end

    if length % 2 != 0
      sum += data[length - 1] << 8
    end

    sum = (sum >> 16) + (sum & 0xFFFF)
    sum += (sum >> 16)

    return ~sum & 0xFFFF
  end

  /#
  @summary: Sends an ICMP echo request to a host and waits for a reply.
  @params:
    - `host`: The destination IP address or hostname.
  @return: Hashmap contain `duration` (round-trip time in milliseconds) and `data` (the reply), or -1 on failure.
  #/
  fn echo(host: string): any
    sock_id = null
    
    try
      sock_id = socket::create_raw_socket()

      if sock_id < 0
        println("Failed to create raw socket")
        return -1
      end
    catch (err)
      println "An error occurred while creating raw socket: ${err}"
      return -1
    end

    try
      packet = []
      packet.push(ping::ICMP_ECHO_REQUEST)  # Type
      packet.push(ping::ICMP_CODE)          # Code
      packet.push(0)                        # Checksum (placeholder)
      packet.push(0)                        # Identifier (e.g., process ID)
      packet.push(0)                        # Sequence Number

      # Add some payload
      for i in [0..47] do
        packet.push(i % 256)
      end

      csum = ping::checksum(packet)
      packet[2] = (csum >> 8) & 0xFF
      packet[3] = csum & 0xFF

      start_time = time::ticks()
      socket::sendraw(sock_id, host, packet)
      reply = socket::receive(sock_id, 1024)
      end_time = time::ticks()

      if reply.size() > 0
        return { "data": reply.to_bytes(), "duration": time::ticksms(end_time - start_time) }
      else
        return -1
      end
    catch (err)
      println("ICMP echo request failed: ${err}")
      return -1
    finally
      socket::close(sock_id)
    end
  end
end

export "ping"

println ping::echo("0.0.0.0")