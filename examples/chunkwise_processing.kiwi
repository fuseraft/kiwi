/#
@brief A function to process a list in chunks.
@param input_list The input list.
@param chunk_size The size of the chunk to process.
@param callback A callback to process each chunk with.
@return List of results from each callback.
#/
fn process_chunkwise(input_list, chunk_size, callback)
  results = []

  # Compute how many chunks to process
  chunk_count = math::ceil(input_list.size() / chunk_size.to_float()).to_int()
  
  # Process each chunk
  repeat chunk_count as chunk do
    # Skip-take
    chunk_index = (chunk - 1) * chunk_size
    chunk_data = input_list[chunk_index:chunk_index + chunk_size]
    # Process and store result
    results.push(callback(chunk_data))
  end

  return results
end

fn main()
  start = time::ticks()

  /# Generate one million hashes with two keys: 
     - id (an integer),
     - text (a random hex value). #/
  data = [1..1000000].map(with (n) do 
                            { 
                              "id": n, 
                              "text": math::random(0, 2147483647).to_string('x') 
                            }
                          end)

  # Process in chunks of 200.
  chunk_size = 200

  # The callback in this case will just print the item.
  process = with (item) do
              println item
            end

  # Process the data, 200 chunks at a time.
  process_chunkwise
  (
    data,
    chunk_size,
    process
  )

  println "finished in ${time::ticksms(time::ticks() - start) / 1000} seconds"
end

main()
