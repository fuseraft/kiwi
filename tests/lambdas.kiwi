# setup
list = [{"id": 0}, {"id": 1}, {"id": 2}, {"id": 3}, {"id": 4},
        {"id": 5}, {"id": 6}, {"id": 7}, {"id": 8}, {"id": 9}]

# Assigned and inline lambdas
odd_item_id = with (item) do return item.id % 2 != 0 end # Define an assigned lambda.
puts = (with (s) do println(s) end) # Defining a lambda and using it to wrap functionality.
puts("Hello, World!") # prints: Hello, World!

# Lambdas as first-class citizens
def use_lambda(print_func, message) print_func(message) end
use_lambda(puts, "Hello, Kiwi!")

# List.select test
println(list.select(with (item) do return item["id"] % 2 == 0 end)) # Using an inline lambda.
println(list.select(odd_item_id))                                   # Using an assigned lambda.

# List.map
println(["kiwi", "mango", "banana"].map(with (item) do return { "fruit": item, "is_a_kiwi": item.lowercase() == "kiwi" } end))

# List.reduce
numbers = [1, 2, 3, 4, 5]

println(numbers.reduce(0, with (accumulator, number) do
  return accumulator + number
end)) # prints: 15

println(numbers.reduce({}, with (accumulator, number) do
  accumulator["key${number}"] = number
  return accumulator
end)) # prints: {"key1": 1, "key2": 2, "key3": 3, "key4": 4, "key5": 5}