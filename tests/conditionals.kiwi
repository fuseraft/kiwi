#!/usr/bin/kiwi
/# This 🥝 script is for experimentation. #/

abstract class X
  abstract def run(x)
end

class A < X
  def initialize() end
  override def run(x) return "A: ${x}" end
end

class B < X
  def initialize() end
  override def run(x) return "B: ${x}" end
end

class C < X
  def initialize() end
  override def run(x) return "C: ${x}" end
end

class D
  def initialize() end
  def run(x) return "D: ${x}" end
end

# Testing deeply nested conditions.
for o, i in [A.new(), B.new(), C.new(), D.new()] do
  res = ''
  if o.is_a(A)
    if !true
      pass # this will never happen
    else
      res = o.run("I am an A")
    end
  elsif o.is_a(C) || o.is_a(B)
    if o.is_a(C)
      res = o.run("I am a C")
    else
      if o.is_a(B)
        res = o.run("I am a B.")
      else
        pass # this will never happen
      end
    end
  else
    if o.is_a(X)
      res = o.run("I am an X")
    else
      res = o.run("I am something else.")
    end
  end

  println "${i}: ${res}"
end

/# Output:
A: I am an A
B: I am a C, or a B.
C: I am a C, or a B.
D: I am something else.
#/