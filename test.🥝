/#
 The Kiwi Programming Language 1.4.7
 #/

fn testsuite()
  println "Running Kiwi Test Suite ...\n"

  results = kunit::run_tests()

  succeeded = 0, failed = 0, duration = 0

  for r in results do
    duration += r.duration

    if r.result
      succeeded += 1
    else
      failed += 1
    end
  end

  println "\nRan ${results.size()} test(s) in ${duration}ms\n"

  if failed == 0
    println "All tests passed!"
  else
    println "${succeeded} tests passed, ${failed} tests failed."
  end
end

kunit::register_test("truthiness", with () do
  kunit::assert(!null.truthy())      # null is never truthy
  kunit::assert(!(0).truthy())       # 0 is the only non-truthy number
  kunit::assert((1).truthy())        # non-zero numbers are always truthy
  kunit::assert(!"".truthy())        # empty strings are not truthy
  kunit::assert("0".truthy())        # non-empty strings are truthy
  kunit::assert(![].truthy())        # empty lists are not truthy
  kunit::assert([0].truthy())        # non-empty lists are truthy
  kunit::assert(!{}.truthy())        # empty hashes are not truthy
  kunit::assert({'a': 1}.truthy())   # non-empty hashes are truthy
  kunit::assert(!false.truthy())     # false is never truthy
  kunit::assert(true.truthy())       # true is always truthy
end)

kunit::register_test("operators", with () do
  # arithmetic
  kunit::assert(10 + 20 == 30)   # addition
  kunit::assert(10 - 20 == -10)  # subtraction
  kunit::assert(10 * 20 == 200)  # multiplication
  kunit::assert(10 / 20. == 0.5) # division
  kunit::assert(10 % 2 == 0)     # modulo division
  kunit::assert(10 ** 2 == 100)  # exponentiation
  
  # logical or 
  kunit::assert(!(false || false))
  kunit::assert(false || true)
  kunit::assert(true || false)
  kunit::assert(true || true)

  # logical and
  kunit::assert(!(false && false))
  kunit::assert(!(false && true))
  kunit::assert(!(true && false))
  kunit::assert(true && true)

  # logical not
  kunit::assert(!true == !true)
  kunit::assert(!!true)
  kunit::assert(!false)

  # comparison
  kunit::assert(1 < 2)
  kunit::assert(2 > 1)
  kunit::assert(1 <= 1)
  kunit::assert(1 >= 1)
  kunit::assert(1 == 1)
  kunit::assert(1 != 0)

  # bitwise operators
  a = 5, b = 9
  kunit::assert(a & b == 1)
  kunit::assert(a | b == 13)
  kunit::assert(a ^ b == 12)
  kunit::assert(a << 1 == 10)
  kunit::assert(a >> 1 == 2)
  kunit::assert(~a == -6)

  # bitswap
  old_a = a, old_b = b
  a = a ^ b, b = a ^ b, a = a ^ b
  kunit::assert(b == old_a)
  kunit::assert(a == old_b)
end)

kunit::register_test("strings", with () do
  # simple concatenation
  a = "Hello", b = " World"
  kunit::assert(a + b == "Hello World")

  # concatenation expression
  a = "Hello", b = "World"
  kunit::assert((a + " " + b) == "Hello World")

  # string interpolation
  kunit::assert("${a} ${b}" == "Hello World")

  wrap_string = with (inputstring, openchar, closechar) do
    return "${openchar}${inputstring}${closechar}"
  end

  kunit::assert("${wrap_string("div", "<", ">")}" == "<div>")

  # string multiplication
  a = "Hello", b = 5
  kunit::assert(a * b == "HelloHelloHelloHelloHello")
end)

kunit::register_test("lists", with () do
  # Basic List Operations
  basic_list = [1, 2, 3]
  kunit::assert(basic_list.size() == 3)
  kunit::assert(basic_list[0] == 1)
  kunit::assert(basic_list[1] == 2)
  kunit::assert(basic_list[2] == 3)

  # List Insertion
  basic_list.push(4)
  kunit::assert(basic_list == [1, 2, 3, 4])

  # List Concatenation
  other_list = [5, 6, 7]
  combined_list = basic_list.concat(other_list)
  kunit::assert(combined_list == [1, 2, 3, 4, 5, 6, 7])

  # List Joining
  words = ["The", "Kiwi", "Programming", "Language"]
  kunit::assert(words.join(" ") == "The Kiwi Programming Language")
  kunit::assert(words.join("-") == "The-Kiwi-Programming-Language")
  kunit::assert(words.join("") == "TheKiwiProgrammingLanguage")
  kunit::assert(words.join() == "TheKiwiProgrammingLanguage")

  # List Slicing
  sliced_list = combined_list[2:5]
  kunit::assert(sliced_list == [3, 4, 5])

  # List Reversal
  reversed_list = combined_list[::-1]
  kunit::assert(reversed_list == [7, 6, 5, 4, 3, 2, 1])

  # Nested Lists and Flattening
  nested_list = [1, 2, [3, 4], [5, [6, 7]]]
  kunit::assert(nested_list.flatten() == [1, 2, 3, 4, 5, 6, 7])

  # List Insertion and Replacement
  a = [1, 2, 3, 4], b = ["a", "b", "c", "d"], c = [true, false, true, false]

  a[0] <<= b[0]  # Insert operation
  kunit::assert(a == ["a", 1, 2, 3, 4])
  
  a[0] <<= b[0:2:-1]  # Insert reversed range
  kunit::assert(a == ["d", "c", "a", 1, 2, 3, 4])
  
  a[0] = b[0]  # Replace operation
  kunit::assert(a == ["a", "c", "a", 1, 2, 3, 4]) 
  
  a[0] = b[1]  # Replace operation
  kunit::assert(a == ["b", "c", "a", 1, 2, 3, 4]) 
  
  a[3] = b[2]  # Replace operation
  kunit::assert(a == ["b", "c", "a", "c", 2, 3, 4])
  
  a[0:2] = c[0:2]  # Slice assignment
  kunit::assert(a == [true, false, "a", "c", 2, 3, 4])
  
  a[0:2] = c[0:2:-1]  # Slice assignment of reversed slice
  kunit::assert(a == [false, true, "a", "c", 2, 3, 4])

  # String to List Conversion and Manipulation
  char_list = "abcdef".chars()
  kunit::assert(char_list == ["a", "b", "c", "d", "e", "f"])

  # Empty List Verification
  new_list = []
  while !char_list.empty() do
    new_list << char_list.first()
    delete char_list[0]
  end

  kunit::assert(char_list.empty())
  kunit::assert(new_list == ["a", "b", "c", "d", "e", "f"])

  # List Initialization with a Range
  range_list = [1..5]
  kunit::assert(range_list == [1, 2, 3, 4, 5])
end)


kunit::register_test("sets", with () do
  s1 = Set.new([1, 2, 3])
  s2 = Set.new([1, 2])
  s3 = Set.new([4, 5])
  s4 = Set.new([1, 2, 3, 4])

  kunit::assert(s1.subset(s2) == false)
  kunit::assert(s2.subset(s1) == true)
  kunit::assert(s3.subset(s1) == false)
  kunit::assert(s2.subset(s2) == true)
  kunit::assert(s2.subset(s4) == true)
  kunit::assert(s1.superset(s2) == true)
  kunit::assert(s2.superset(s1) == false)
  kunit::assert(s1.superset(s3) == false)
  kunit::assert(s2.superset(s2) == true)
  kunit::assert(s4.superset(s2) == true)
  
  a1 = Set.new([3,6,4])
  a2 = Set.new([1,2,3,4,5,6,7,8,9])
  
  a3 = a2.difference(a1)
  kunit::assert(a3.to_list() == [1,2,5,7,8,9])
  
  a3.clear()
  kunit::assert(a3.to_list().empty())
end)

kunit::register_test("heaps", with () do
  min_heap = Heap.new("min")
  max_heap = Heap.new("max")

  # Insert elements into the min-heap
  min_heap.insert(5)
  min_heap.insert(3)
  min_heap.insert(8)
  min_heap.insert(1)

  # Extract root from min-heap
  kunit::assert(min_heap.extract_root() == 1)
  kunit::assert(min_heap.extract_root() == 3)

  # Insert elements into the max-heap
  max_heap.insert(5)
  max_heap.insert(3)
  max_heap.insert(8)
  max_heap.insert(1)

  # Extract root from max-heap
  kunit::assert(max_heap.extract_root() == 8)
  kunit::assert(max_heap.extract_root() == 5)
end)

kunit::register_test("hashes", with () do
  hash = {
    "key1": true, 
    "key2": 1, 
    "key3": ["a", "b", "c"]
  }

  other_hash = {}

  for key in hash.keys() do 
    other_hash[key] = hash[key] 
  end
  
  kunit::assert(other_hash == hash)

  other_hash = {}, other_hash = hash.merge(other_hash)
  kunit::assert(other_hash == {"key1": true, "key2": 1, "key3": ["a", "b", "c"]})

  other_hash.remove("key1")
  kunit::assert(other_hash.keys() == ["key2", "key3"])
  kunit::assert(other_hash.values() == [1, ["a", "b", "c"]])

  other_hash.clear()
  kunit::assert(other_hash.empty())

  other_hash.hello = "world"
  kunit::assert(other_hash.get("hello") == "world")
  
  other_hash.set("hello", "kiwi")
  kunit::assert(other_hash.hello == "kiwi")
end)

kunit::register_test("dates", with () do
  d = DateTime.new(DateTime.now().get_year(), 1, 2).add_days(-1).add_hours(-1).add_minutes(-1).add_seconds(-1)
  d2 = DateTime.now()
  d3 = d.clone()

  kunit::assert(d.before(d2))
  kunit::assert(d2.after(d))
  kunit::assert(d3.equal(d))
end)

kunit::register_test("nulls", with () do
  e = {"a": null, "b": null}
  kunit::assert(e == {"a": null, "b": null})

  e.a = false
  e.b = 'hello'
  kunit::assert(e == {"a": false, "b": "hello"})

  e.a = null
  e.b = null
  kunit::assert(e == {"a": null, "b": null})

  e = null
  kunit::assert(e == null)

  e = 0
  kunit::assert(e != null)

  kunit::assert(!null)
  kunit::assert(!!!null)
end)

kunit::register_test("type checks", with () do
  s = "kiwi", i = 100, d = 3.14159, b = true, h = {'a': [123, 456, "789"]}

  class TypeCheckMe
    def initialize() end
  end

  inst = TypeCheckMe.new()

  kunit::assert(s.is_a(String))
  kunit::assert(i.is_a(Integer))
  kunit::assert(d.is_a(Double))
  kunit::assert(b.is_a(Boolean))
  kunit::assert(inst.is_a(TypeCheckMe))
  kunit::assert(inst.is_a(Object))
  kunit::assert(null.is_a(None))
  kunit::assert(h.is_a(Hash))
  kunit::assert(h.a.is_a(List))
end)

kunit::register_test("loops", with () do
  fruits = ["kiwi", "strawberry", "pineapple", "lime", "mango", "guava"]
  list = []

  # iterate list
  for fruit in fruits do
    list.push(fruit)
  end

  kunit::assert(list == ["kiwi", "strawberry", "pineapple", "lime", "mango", "guava"])
  list.clear()

  # iterate index
  for fruit, index in fruits do 
    list.push(index)
  end

  kunit::assert(list == [0, 1, 2, 3, 4, 5])
  list.clear()

  # iterate inline list
  for item in ["kiwi", "is", "fun"] do
    list.push(item)
  end

  kunit::assert(list == ["kiwi", "is", "fun"])
  list.clear()
  
  # iterate an inline list with an index
  for item, index in ["kiwi", "is", "fun"] do
    list.push(index)
  end

  kunit::assert(list == [0, 1, 2])
  list.clear()

  # iterate a range
  for i in [0..5] do
    list.push(i)
  end

  kunit::assert(list == [0, 1, 2, 3, 4, 5])
  list.clear()

  # nested while loops
  i = 0, test_sum = 0
  while i < 10 do
    i += 1, j = 0
    
    while j < 10 do
      j += 1, test_sum += 1
    end
  end

  kunit::assert(test_sum == 100)

  list = [], i = 1
  while i <= 10 do
    list << "Item ${i}"
    i += 1
  end

  counter = 0
  for item, index in list do
    counter += 1
    next when index == 5
  end

  kunit::assert(counter == 5)

  counter = 0
  for item, index in list do
    counter += 1
    break when index == 5
  end

  kunit::assert(counter == 6)

  # repeat-loop
  sum = 0
  repeat 10 as i do
    sum += i
  end

  kunit::assert(sum == 55)

  x = 2
  repeat 4 do
    x *= x
  end
  
  kunit::assert(x == 65536)
end)

kunit::register_test("`when`", with () do
  fn sum(list)
    throw "Not a list of integers" when !list.is_a(List)
    throw "Not a list of integers" when list.size() != list.select(with (item) do return item.is_a(Integer) end).size()
    return 0 when list.empty()
    return list.sum()
  end

  [[1, 2, 3], "1, 2, 3", [/# an empty list #/], "123".chars()].each(with (item, index) do
    try
      res = sum(item)
      if index == 0
        kunit::assert(res == 6)
      elsif index == 2
        kunit::assert(res == 0)
      end
    catch (err)
      kunit::assert(err == "Not a list of integers")
    end
  end)
end)

kunit::register_test("standard library", with () do
  kunit::assert(math::sin(0) == 0.)
  kunit::assert(math::cos(0) == 1.)
  kunit::assert(math::tan(0) == 0.)
end)

kunit::register_test("serialization", with () do
  class SerializeMe
    def initialize(name)
      @name = name
    end
  end

  inst = SerializeMe.new("kiwi")
  kunit::assert(inst.to_hash() == {"name": "kiwi"})

  hash = inst.to_hash()
  hash.flag = true
  hash["sub_hash"] = { "key": "value" }
  kunit::assert(hash == {"name": "kiwi", "flag": true, "sub_hash": {"key": "value"}})
end)

kunit::register_test("try-finally", with () do
  a = 0, b = 0

  try
    a += 1
    println "${1 / 0}"
    a += 1
  finally
    b += 1
  end
  
  kunit::assert(a == 1)
  kunit::assert(b == 1)
end)

kunit::register_test("try-catch-finally", with () do
  a = 0, b = 0, c = 0

  try
    for i in [0 .. 1] do
      a += 1
      println "${i / 0}"
      a += 1
    end
  catch (err)
    b += 1
  finally
    c += 1
  end

  kunit::assert(a == 1)
  kunit::assert(b == 1)
  kunit::assert(c == 1)
end)

kunit::register_test("nested try-catch", with () do
  a = 0, b = 0, c = 0

  for i in [0 .. 1] do
    try
      a += 1
      println "${i / 0}"
    catch (err, msg)
      b += 1
    finally
      c += 1
    end
  end

  kunit::assert(a == 2)
  kunit::assert(b == 2)
  kunit::assert(c == 2)
end)

kunit::register_test("lambdas", with () do
  # setup
  list = [{"id": 0}, {"id": 1}, {"id": 2}, {"id": 3}, {"id": 4},
          {"id": 5}, {"id": 6}, {"id": 7}, {"id": 8}, {"id": 9}]

  # Assigned and inline lambdas
  odd_item_id = with (item) do return item.id % 2 != 0 end # Define an assigned lambda.
  puts = with (s) do return s end # Defining a lambda and using it to wrap functionality.
  kunit::assert(puts("Hello, World!") == "Hello, World!")

  # Lambdas as first-class citizens
  fn use_lambda(print_func, message) return print_func(message) end
  kunit::assert(use_lambda(puts, "Hello, Kiwi!") == "Hello, Kiwi!")

  # List.select test
  kunit::assert(list.select(with (item) do return item["id"] % 2 == 0 end) == [{"id": 0}, {"id": 2}, {"id": 4}, {"id": 6}, {"id": 8}])
  kunit::assert(list.select(odd_item_id) == [{"id": 1}, {"id": 3}, {"id": 5}, {"id": 7}, {"id": 9}])

  # List.map
  kunit::assert
  (
    ["kiwi", "mango", "banana"].map(with (item) do return { "fruit": item, "is_a_kiwi": item.lowercase() == "kiwi" } end)
      == [{"fruit": "kiwi", "is_a_kiwi": true}, {"fruit": "mango", "is_a_kiwi": false}, {"fruit": "banana", "is_a_kiwi": false}]
  )

  # List.reduce
  numbers = [1, 2, 3, 4, 5]

  kunit::assert((numbers.reduce(0, with (accumulator, number) do
    return accumulator + number
  end)) == 15)

  kunit::assert((numbers.reduce({}, with (accumulator, number) do
    accumulator["key${number}"] = number
    return accumulator
  end)) == {"key1": 1, "key2": 2, "key3": 3, "key4": 4, "key5": 5})
end)

kunit::register_test("obfuscation", with () do
  p=with(x)do return(x)end,a='fn;end;return;g;kiwi;s;, '.split(';')c=with(n,b=[],p=[])do ___=["${a[0]} ${n}"]if!p.empty()___=["${___.join()}(${p.join("${a[6]}")})"]end if!b.empty()b.each(with(l)do ___<<"${l}"end)end ___<<a[1]return ___.join(" ")end fn m()return p(c(a[5],["${a[2]}(${a[3]})"],[a[3]]))s("${a[4]}")end
  kunit::assert(m() == "fn s(g) return(g) end")
end)

testsuite()