/#
Summary: A package for building web applications.
#/

package web
  /#
  Summary: Returns an OK response.
  Params:
    - _content: The content to return.
    - _content_type: The MIME type.
    - _status: The status code. Defaults to 200.
  Returns: A hashmap with content, content-type, and status.
  #/
  fn ok(_content, _content_type, _status = 200)
    return { "content": _content, "content-type": _content_type, "status": _status }
  end

  /#
  Summary: Returns an BAD response.
  Params:
    - _content: The content to return.
    - _content_type: The MIME type.
    - _status: The status code. Defaults to 500.
  Returns: A hashmap with content, content-type, and status.
  #/
  fn bad(_content, _content_type, _status = 500)
    return { "content": _content, "content-type": _content_type, "status": _status }
  end

  /#
  Summary: Redirects a request.
  Params:
    - _url: The URL to redirect to.
  Returns: A hashmap with content, content-type, and status.
  #/
  fn redirect(_url, _status = 302)
    return { "redirect": _url, "status": _status }
  end

  /#
  Summary: Registers a GET endpoint.
  Params:
    - _endpoint: The endpoint to register.
    - _handler: A request handler lambda.
  #/
  fn get(_endpoint, _handler)
    __webs_get__(_endpoint, _handler)
  end

  /#
  Summary: Registers a POST endpoint.
  Params:
    - _endpoint: The endpoint to register.
    - _handler: A request handler lambda.
  #/
  fn post(_endpoint, _handler)
    __webs_post__(_endpoint, _handler)
  end

  /#
  Summary: Instructs the web server to listen for HTTP requests.
  Params:
    - _ipaddr: The host. Defaults to 0.0.0.0.
    - _port: The port. Defaults to 8080.
  #/
  fn listen(_ipaddr = "0.0.0.0", _port = 8080)
    __webs_listen__(_ipaddr, _port)
  end

  /#
  Summary: Instructs the web server to serve static content.
  Params:
    - _public_endpoint: The endpoint at which static content is served.
    - _public_path: The server-side path containing static content to be served.
  #/
  fn public(_public_endpoint, _public_path)
    __webs_public__(_public_endpoint, _public_path)
  end

  /#
  fn port()
    return __webs_port__()
  end

  fn host()
    return __webs_host__()
  end
  #/
end

export "web"