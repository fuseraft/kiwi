/#
Summary: A package containing functionality for working with common math operations.
#/
package math
  /#
  Summary: Gets the smallest difference from 1.0 that a FP type can accurately represent.
  Returns: Double
  #/
  def epsilon()
    return __eps__()
  end

  /#
  @summary: Gets a random number between x and y.
  @param   Integer|Double  _valueX   : The number x. 
  @param   Integer|Double  _valueY   : The number y. 
  @return  Integer|Double            : A random number.
  #/
  def random(_valueX, _valueY)
    return __random__(_valueX, _valueY)
  end

  /#
  Summary: Gets a random set of numbers of a given size.
  @param   Integer|Double  _range_start   : The lower bound. 
  @param   Integer|Double  _range_end     : The upper bound. 
  @param   Integer         _size          : The size of the set.
  @return  List                           : A set of random numbers.
  #/
  def random_set(_range_start, _range_end, _size)
    _min = [_range_start, _range_end].min()
    _max = [_range_start, _range_end].max()

    # Ensure valid size and range, then generate a set of unique random numbers
    if _size == 0 || _range_start == _range_end || (_max - _min) < _size
      return []
    end
    
    _set = []
    _count = 0

    while _count != _size do
      _n = math::random(_min, _max)

      if _set.index(_n) < 0
        _set << _n
        _count += 1
      end
    end

    return _set
  end

  /#
  Summary: Get a list of prime numbers up to a limit.
  Params:
    - _limit: The limit.
  Returns: List
  #/
  def listprimes(_limit)
    return __listprimes__(_limit)
  end

  /#
  Summary: Get the n-th prime number.
  Params:
    - _n: The n-th prime number.
  Returns: Integer
  #/
  def nthprime(_n)
    return __nthprime__(_n)
  end

  /#
  Summary: Computes the sine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def sin(_value)
    return __sin__(_value)
  end

  /#
  Summary: Computes the cosine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def cos(_value)
    return __cos__(_value)
  end

  /#
  Summary: Computes the tangent of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def tan(_value)
    return __tan__(_value)
  end

  /#
  Summary: Computes the arc sine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def asin(_value)
    return __asin__(_value)
  end

  /#
  Summary: Computes the arc cosine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def acos(_value)
    return __acos__(_value)
  end

  /#
  Summary: Computes the arc tangent of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def atan(_value)
    return __atan__(_value)
  end

  /#
  Summary: Computes the arc tangent of y / x, handling quadrants correctly.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def atan2(_valueY, _valueX)
    return __atan2__(_valueY, _valueX)
  end

  /#
  Summary: Computes the hyperbolic sine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def sinh(_value)
    return __sinh__(_value)
  end

  /#
  Summary: Computes the hyperbolic cosine of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def cosh(_value)
    return __cosh__(_value)
  end

  /#
  Summary: Computes the hyperbolic tangent of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def tanh(_value)
    return __tanh__(_value)
  end

  /#
  Summary: Computes the natural logarithm (base e) of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def log(_value)
    return __log__(_value)
  end

  /#
  Summary: Computes the logarithm to base 2 of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def log2(_value)
    return __log2__(_value)
  end

  /#
  Summary: Computes the logarithm to base 10 of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def log10(_value)
    return __log10__(_value)
  end

  /#
  Summary: Computes log(1 + x).
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def log1p(_value)
    return __log1p__(_value)
  end

  /#
  Summary: Computes the square root of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def sqrt(_value)
    return __sqrt__(_value)
  end

  /#
  Summary: Computes the cube root of a number.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def cbrt(_value)
    return __cbrt__(_value)
  end

  /#
  Summary: Gets the FP remainder of x / y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def fmod(_valueX, _valueY)
    return __fmod__(_valueX, _valueY)
  end

  /#
  Summary: Computes sqrt(x**2 + y**2) without undue overflow or underflow.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def hypot(_valueX, _valueY)
    return __hypot__(_valueX, _valueY)
  end

  /#
  Summary: Checks if x is a finite value.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def isfinite(_value)
    return __isfinite__(_value)
  end

  /#
  Summary: Checks if x is a finite value.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def isinf(_value)
    return __isinf__(_value)
  end

  /#
  Summary: Checks if x is NaN.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def isnan(_value)
    return __isnan__(_value)
  end

  /#
  Summary: Checks if x is a normal FP number.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def isnormal(_value)
    return __isnormal__(_value)
  end

  /#
  Summary: Rounds x to the nearest integer, away from zero in halfway cases.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def floor(_value)
    return __floor__(_value)
  end

  /#
  Summary: Rounds x to the largest integer not greater than x.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def ceil(_value)
    return __ceil__(_value)
  end

  /#
  Summary: Rounds x to the nearest integer, away from zero in halfway cases.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def round(_value)
    return __round__(_value)
  end

  /#
  Summary: Truncates x to the integer part, towards zero.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def trunc(_value)
    return __trunc__(_value)
  end

  /#
  Summary: IEEE 754 FP remainder of x / y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def remainder(_valueX, _valueY)
    return __remainder__(_valueX, _valueY)
  end

  /#
  Summary: Computes e**x.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def exp(_value)
    return __exp__(_value)
  end

  /#
  Summary: Computes e**x - 1.
  Params:
    - _value: The number x.
  Returns: Double
  #/
  def expm1(_value)
    return __expm1__(_value)
  end

  /#
  Summary: Error function.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def erf(_value)
    return __erf__(_value)
  end

  /#
  Summary: Complementary error function.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def erfc(_value)
    return __erfc__(_value)
  end

  /#
  Summary: The natural logarithm of the absolute value of the gamma function.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def lgamma(_value)
    return __lgamma__(_value)
  end

  /#
  Summary: The gamma function.
  Params:
    - _value: The number.
  Returns: Double
  #/
  def tgamma(_value)
    return __tgamma__(_value)
  end

  /#
  Summary: Copies the sign of y to x.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def copysign(_valueX, _valueY)
    return __copysign__(_valueX, _valueY)
  end

  /#
  Summary: Get the next representable value after x towards y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def nextafter(_valueX, _valueY)
    return __nextafter__(_valueX, _valueY)
  end

  /#
  Summary: Get the maximum of x and y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def fmax(_valueX, _valueY)
    return __fmax__(_valueX, _valueY)
  end

  /#
  Summary: Get the minimum of x and y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def fmin(_valueX, _valueY)
    return __fmin__(_valueX, _valueY)
  end

  /#
  Summary: Get the positive difference between x and y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def fdim(_valueX, _valueY)
    return __fdim__(_valueX, _valueY)
  end

  /#
  Summary: Get x raised to the power of y.
  Params:
    - _valueX: The number x.
    - _valueY: The number y.
  Returns: Double
  #/
  def pow(_valueX, _valueY)
    return __pow__(_valueX, _valueY)
  end

  /#
  Summary: Get the absolute value of a number.
  Params:
    - _value: The number.
  Returns: Integer|Double
  #/
  def abs(_value)
    return __abs__(_value)
  end
end

import "math"