/#
A work in progress.
#/

package std
  fn len(n)
    return n.size()
  end

  fn type(n)
    return n.type()
  end

  fn is_int(n)
    return std::type(n) == Integer
  end

  fn is_float(n)
    return std::type(n) == Float
  end

  fn is_string(s)
    return std::type(s) == String
  end

  fn is_hashmap(s)
    return std::type(s) == Hashmap
  end

  fn range(x, y)
    throw Error.InvalidRange() when ![x, y].all(with (n) do std::is_int(n) end)
    return [x..y - 1]
  end
end

package std::error
  fn create(error_type: string = "KiwiError", error_message: string = "An error occurred."): hashmap
    return { "error": error_type, "message": error_message }
  end

  fn InvalidRange(msg = "Invalid range.")
    return std::error::create("InvalidRange", msg)
  end

  fn InvalidOperation(msg = "Invalid operation.")
    return std::error::create("InvalidOperation", msg)
  end
end

export "std"
export "std::error"