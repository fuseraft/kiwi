
/#
A package with interesting string operations.
#/
package string
  /#
  @summary Returns `true` if `str` contains any values in `matches`.
  @param   String  str      : The input string. 
  @param   List    matches  : The strings to match against. 
  @return  Boolean          : True if found.
  #/
  fn contains_any(str, matches = [])
    if matches.type() == "String"
      matches = matches.chars()
    end

    throw "matches must be a list" when matches.type() != "List"

    for m in matches do
      if str.contains(m)
        return true
      end
    end

    return false
  end

  /#
  @summary Encodes a string as a base64 string.
  @param   String  _input   : The input string. 
  @return  String           : The base64 encoded string.
  #/
  fn base64encode(_input)
    return __base64encode__("${_input}")
  end

  /#
  @summary Decodes a base64 string to plaintext.
  @param   String  _input   : The input string. 
  @return  String           : The plaintext string.
  #/
  fn base64decode(_input)
    return __base64decode__("${_input}")
  end

  /#
  @summary Encodes a string as a URL encoded string.
  @param   String  _input   : The input string.
  @return  String           : The URL encoded string.
  #/
  fn urlencode(_input)
    return __urlencode__("${_input}")
  end

  /#
  @summary Decodes a URL encoded string to plaintext.
  @param   String  _input   : The input string. 
  @return  String           : The plaintext string.
  #/
  fn urldecode(_input)
    return __urldecode__("${_input}")
  end

  /#
  @summary Pads the left side of a string.
  @param   String  _input   : The input string. 
  @param   Integer _size    : The max length of the output string.
  @param   String  _padding : The padding content.
  @return  String           : The padded string.
  #/
  fn padstart(_input, _size, _padding = " ")
    return "${_input}" when ("${_input}").size() >= _size
    if _padding.size() != 1 _padding = " " end
    _padding_size = _size - ("${_input}").size()
    _pad = _padding * _padding_size
    return _pad + "${_input}"
  end

  /#
  @summary Pads the right side of a string.
  @param   String  _input   : The input string. 
  @param   Integer _size    : The max length of the output string.
  @param   String  _padding : The padding content.
  @return  String           : The padded string.
  #/
  fn padend(_input, _size, _padding = " ")
    return "${_input}" when ("${_input}").size() >= _size
    if _padding.size() != 1 _padding = " " end
    _padding_size = _size - ("${_input}").size()
    _pad = _padding * _padding_size
    return "${_input}" + _pad
  end

  /#
  @summary Centers a string within a given width.
  @param   String  _input   : The input string.
  @param   Integer _width   : The width of the resulting string.
  @param   String  _padding : The padding character (default is space).
  @return  String           : The centered string.
  #/
  fn center(_input, _width, _padding = " ")
    return "${_input}" when ("${_input}").size() >= _width
    if _padding.size() != 1 _padding = " " end
    _total_padding = _width - ("${_input}").size()
    _left_padding_size = _total_padding / 2
    _right_padding_size = _total_padding - _left_padding_size
    _left_pad = _padding * _left_padding_size
    _right_pad = _padding * _right_padding_size
    return _left_pad + ("${_input}") + _right_pad
  end

  /#
  @summary Repeats each character in the string a specified number of times.
  @param   String  _input : The input string.
  @param   Integer _count : The number of times each character is repeated.
  @return  String         : The string with characters echoed.
  #/
  fn echo(_input, _count)
    _output = ""
    for char in ("${_input}").chars() do
      _output = _output + (char * _count)
    end
    return _output
  end

  /#
  @summary Interweaves characters from two strings.
  @param   String  _input1 : The first input string.
  @param   String  _input2 : The second input string.
  @return  String          : The interwoven string.
  #/
  fn interweave(_input1, _input2)
    _output = ""
    _length = [("${_input1}").size(), ("${_input2}").size()].max()
    for i in [0 .. _length - 1] do
      if i < ("${_input1}").size() _output = _output + ("${_input1}")[i] end
      if i < ("${_input2}").size() _output = _output + ("${_input2}")[i] end
    end
    return _output
  end

  /#
  @summary Creates a mirrored version of the input string.
  @param   String  _input    : The input string.
  @param   String  _delimiter: The delimiter to separate the original string from its mirror.
  @return  String            : The mirrored string.
  #/
  fn mirror(_input, _delimiter = "")
    _reversed = ("${_input}").reverse()
    return ("${_input}") + _delimiter + _reversed
  end

  /#
  @summary Randomly shuffles the characters in a string.
  @param   String  _input : The input string.
  @return  String         : The shuffled string.
  #/
  fn shuffle(_input)
    _array = ("${_input}").chars()
    _n = _array.size()
    
    while _n > 1 do
      _n = _n - 1
      _k = __random__(0, _n)
      _temp = _array[_k]
      _array[_k] = _array[_n]
      _array[_n] = _temp
    end

    return _array.join("")
  end

  /#
  @summary Generates a URL-friendly slug from a string.
  @param   String  _input   : The input string.
  @return  String           : The generated slug.
  #/
  fn slug(_input)
    _lowercased = ("${_input}").lowercase()
    _hyphenated = _lowercased.replace(" ", "-")

    _slug = ""

    for char in _hyphenated.chars() do
      if char.is_a(Integer) || (char >= "a" && char <= "z") || char == "-"
        _slug += char
      end
    end

    return _slug
  end

  /#
  @summary Checks if the string consists only of numeric characters.
  @param   String  _input : The input string.
  @return  Boolean        : True if the string is numeric, otherwise false.
  #/
  fn isnumeric(_input)
    _isnumeric = true
    
    for char in ("${_input}").chars() do
      if !(char >= "0" && char <= "9")
        _isnumeric = false
        break
      end
    end

    return _isnumeric
  end

  /#
  @summary Checks if the string consists only of alphabetic characters.
  @param   String  _input : The input string.
  @return  Boolean        : True if the string is alphabetic, otherwise false.
  #/
  fn isalpha(_input)
    for char in ("${_input}").chars() do
      if !((char >= "a" && char <= "z") || (char >= "A" && char <= "Z"))
        return false
      end
    end

    return true
  end

  /#
  @summary Checks if the string consists only of alphanumeric characters.
  @param   String  _input : The input string.
  @return  Boolean        : True if the string is alphanumeric, otherwise false.
  #/
  fn isalphanumeric(_input)
    for char in ("${_input}").chars() do
      if !(char >= "0" && char <= "9" || (char >= "a" && char <= "z") || (char >= "A" && char <= "Z"))
        return false
      end
    end

    return true
  end

  /#
  @summary Checks if the string is entirely in uppercase.
  @param   String  _input   : The input string.
  @return  Boolean          : True if the string is all uppercase, false otherwise.
  #/
  fn isupper(_input)
    for char in ("${_input}").chars() do
      # If any character is lowercase, return false
      if char >= "a" && char <= "z"
        return false
      end
    end
    return true
  end

  /#
  @summary Checks if the string is entirely in lowercase.
  @param   String  _input   : The input string.
  @return  Boolean          : True if the string is all lowercase, false otherwise.
  #/
  fn islower(_input)
    for char in ("${_input}").chars() do
      # If any character is uppercase, return false
      if char >= "A" && char <= "Z"
        return false
      end
    end
    return true
  end

  /#
  @summary Converts all characters in the string to uppercase.
  @param   String  _input   : The input string.
  @return  String           : The string converted to uppercase.
  #/
  fn toupper(_input)
    return ("${_input}").uppercase()
  end

  /#
  @summary Converts all characters in the string to lowercase.
  @param   String  _input   : The input string.
  @return  String           : The string converted to lowercase.
  #/
  fn tolower(_input)
    return ("${_input}").lowercase()
  end
end

struct StringIterator
  fn new(s)
    @chars = s.chars()
    @len = @chars.size()
    @pos = 0
  end

  fn consume()
    @pos += 1
  end

  fn skip(n)
    if @pos + n < @len
      @pos = @len
    else
      @pos += n
    end
  end

  fn can_read()
    return @pos + 1 < @len
  end

  fn current()
    if @pos < @len
      return @chars.get(@pos)
    end
    return ""
  end

  fn peek()
    if @pos + 1 < @len
      return @chars.get(@pos + 1)
    end

    return ""
  end

  fn position()
    return @pos
  end

  fn length()
    return @len
  end

  fn rewind(n)
    @pos -= n
  end

  fn grab(n)
    if n < @len && n >= 0
      return @chars.get(n)
    end

    return ""
  end

  fn reach(n)
    if @len + n < @len && @len + n >= 0
      return @chars.get(@len + n)
    end

    return ""
  end

  fn look_ahead()
    return "" when !can_read()
    tmp_chars = []

    try
      tmp_chars = (@chars)[@pos: :]
    end

    c = tmp_chars.get(i)
    i = 0

    while c == " " && i + 1 < tmp_chars.size() do
      c = tmp_chars.get(i)
      i += 1
    end

    return c
  end

  fn count_ahead()
    return 0 when !can_read()
    tmp_chars = []

    try
      tmp_chars = (@chars)[@pos: :]
    end

    c = tmp_chars.get(i)
    i = 0

    while c == " " && i + 1 < tmp_chars.size() do
      c = tmp_chars.get(i)
      i += 1
    end

    return i - 1
  end

  fn skip_whitespace()
    while can_read() && current() == " " do
      consume()
    end
  end
end

export "string"
