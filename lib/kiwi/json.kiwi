package json
  /#
  Summary: Deserialize a JSON string into runtime objects. Returns `null` when data is malformed.
  Params:
    - s: A string containing JSON data.
  Returns: Any type of data deserialized 
  #/
  fn parse(s)
    parse_res = { "KIWI_JSON_PARSE_ERROR": true }
    
    # Expect only string input.
    return parse_res when !std::is_string(s)

    try
      # If it is an empty string, return an empty list.
      return [] when s.trim().empty()

      parse_res = deserialize(s)
    end

    return parse_res
  end

  /#
  Summary: Returns true if a given string value can be parsed as JSON. 
  Params:
    - s: A string to check.
  Returns: Returns `true` if a given string value can be parsed as JSON. 
  #/
  fn can_parse(s)
    # Expect only string input.
    return false when !std::is_string(s)

    parse_res = json::parse(s)

    if std::is_hash(parse_res) && parse_res.has_key("KIWI_JSON_PARSE_ERROR")
      return false
    end
    
    valid_types = [Hash, List, String, Integer, Float, Boolean, None]
    
    return valid_types.contains(parse_res.type())
  end

  /#
  Summary: Serializes runtime objects to JSON string. Returns `null` when data is malformed.
  Params:
    - data: Any data you want to serialize as JSON.
  Returns: String of JSON data.
  #/
  fn stringify(data)
    try
      json = serialize(data)
    end

    return json
  end
end

export "json"