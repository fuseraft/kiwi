# a script for debugging and experimentation (and fun!)

package cidr
  /#
  @summary: Converts an IP address to its integer representation.
  @params:
    - `ip`: The IP address as a string.
  @return: The IP address as an integer.
  #/
  fn ip_to_int(ip: string): integer
    var (parts: list = ip.split("."))

    throw "Invalid IPv4 address: ${ip}"
      when parts.size() != 4

    return (parts[0].to_integer() << 24) | (parts[1].to_integer() << 16) | (parts[2].to_integer() << 8) | parts[3].to_integer()
  end

  /#
  @summary: Converts an integer representation of an IP address back to a string.
  @params:
    - `ip_int`: The IP address as an integer.
  @return: The IP address as a string.
  #/
  fn int_to_ip(ip_int: integer): string
    return "${(ip_int >>> 24)}.${((ip_int >>> 16) & 255)}.${((ip_int >>> 8) & 255)}.${(ip_int & 255)}"          
  end

  /#
  @summary: Parses a CIDR block and returns the network address and prefix length.
  @params:
    - `cidr_block`: The CIDR block as a string (e.g., "192.168.1.0/24").
  @return: A hashmap with `network`, `prefix_length`, `netmask`, and `broadcast`.
  #/
  fn parse_cidr(cidr_block: string): hashmap
    var (parts: list = cidr_block.split("/"))

    throw "Invalid CIDR block: ${cidr_block}"
      when parts.size() != 2

    var (network_ip: integer = cidr::ip_to_int(parts.first()),
         prefix_length: integer = parts.last().to_integer())

    throw "Invalid prefix length: ${prefix_length}"
      when prefix_length < 0 || prefix_length > 32

    var (netmask: integer = ((1 << prefix_length) - 1) << (32 - prefix_length),
         network: integer = network_ip & netmask,
         broadcast: integer = network | ~netmask)

    return {
      "network": cidr::int_to_ip(network),
      "prefix_length": prefix_length,
      "netmask": cidr::int_to_ip(netmask),
      "broadcast": cidr::int_to_ip(broadcast)
    }
  end

  /#
  @summary: Checks if an IP address is within a given CIDR block.
  @params:
    - `ip`: The IP address as a string.
    - `cidr_block`: The CIDR block as a string.
  @return: `true` if the IP is within the CIDR block, otherwise `false`.
  #/
  fn contains(ip: string, cidr_block: string): boolean
    var (ip_int: integer = cidr::ip_to_int(ip),
         cidr_info: hashmap = cidr::parse_cidr(cidr_block),
         network: integer = cidr::ip_to_int(cidr_info["network"]),
         prefix_length: integer = cidr_info["prefix_length"],
         netmask: integer = ((1 << prefix_length) - 1) << (32 - prefix_length))

    return (ip_int & netmask) == network
  end

  /#
  @summary: Calculates the range of valid IP addresses in a CIDR block.
  @params:
    - `cidr_block`: The CIDR block as a string.
  @return: A hashmap with `first_ip` and `last_ip`.
  #/
  fn range(cidr_block: string): hashmap
    var (cidr_info: hashmap = cidr::parse_cidr(cidr_block),
         network: integer = cidr::ip_to_int(cidr_info["network"]),
         prefix_length: integer = cidr_info["prefix_length"])

    # For /32, there's only one valid IP
    if prefix_length == 32
      return {
        "first_ip": cidr::int_to_ip(network),
        "last_ip": cidr::int_to_ip(network)
      }
    end

    var (netmask: integer = ((1 << prefix_length) - 1) << (32 - prefix_length),
         first_ip: integer = network + 1,
         last_ip: integer = (network | ~netmask) - 1)

    return {
      "first_ip": cidr::int_to_ip(first_ip),
      "last_ip": cidr::int_to_ip(last_ip)
    }
  end

  /#
  @summary: Calculates subnets within a given CIDR block.
  @params:
    - `cidr_block`: The original CIDR block as a string (e.g., "192.168.1.0/24").
    - `new_prefix_length`: The prefix length for the subnets.
  @return: A list of CIDR blocks for the subnets.
  #/
  fn subnet(cidr_block: string, new_prefix_length: integer): list
    var (cidr_info: hashmap = cidr::parse_cidr(cidr_block),
         original_prefix_length: integer = cidr_info["prefix_length"])
    
    throw "Invalid new prefix length: ${new_prefix_length}"
      when new_prefix_length <= original_prefix_length || new_prefix_length > 32

    var (network_int: integer = cidr::ip_to_int(cidr_info["network"]),
         num_subnets: integer = 1 << (new_prefix_length - original_prefix_length),
         subnet_size: integer = 1 << (32 - new_prefix_length),
         subnets: list = [])

    var (subnet_network: integer = 0)
    for i in std::range(0, num_subnets) do
      subnet_network = network_int + (i * subnet_size)
      subnets.push("${cidr::int_to_ip(subnet_network)}/${new_prefix_length}")
    end

    return subnets
  end
end

export "cidr"

package cidr_ipv6
  # Converts an IPv6 address string to a list of eight 16-bit integers.
  fn ip_to_blocks(ip: string): list
    var (parts = ip.split("::"))

    throw "Invalid IPv6 address: ${ip}" 
      when parts.size() > 2

    var (left_part = parts.first().empty("").split(":").map(with (p) do p.empty("0").to_integer(16) end))
    var (right_part = parts.last().empty("").split(":").map(with (p) do p.empty("0").to_integer(16) end))

    # Number of missing groups (if "::" was used)
    var (missing_groups = 8 - left_part.size() - right_part.size())

    throw "Invalid IPv6 address: ${ip}" 
      when missing_groups < 0

    # Fill with zero-groups
    var (expanded = left_part + [0]*missing_groups + right_part)

    throw "Invalid IPv6 address: ${ip}, not exactly 8 groups" 
      when expanded.size() != 8

    return expanded
  end

  # Converts a list of eight 16-bit integers back to an IPv6 string.
  fn blocks_to_ip(blocks: list): string
    # Convert each block to hex
    var (hextets = blocks.map(with (b) do b.to_hex() end).clone())

    # Attempt to shorten using "::"
    # Find longest run of zeros
    var (longest_run_len = 0)
    var (longest_run_start = -1)

    var (current_run_len = 0)
    var (current_run_start = 0)

    for i in std::range(0, 8) do
      if hextets[i] == "0"
        if current_run_len == 0
          current_run_start = i
        end
        current_run_len += 1
      else
        if current_run_len > longest_run_len
          longest_run_len = current_run_len
          longest_run_start = current_run_start
        end
        current_run_len = 0
      end
    end

    # Check at the end
    if current_run_len > longest_run_len
      longest_run_len = current_run_len
      longest_run_start = current_run_start
    end

    # If we found a run of zeros of length > 1, replace it with "::"
    if longest_run_len > 1
      var (before = hextets[0:longest_run_start])
      # Fixed the slice to properly exclude the zero run
      var (after = hextets[longest_run_start + longest_run_len:8])
    
      return (before.empty() ? "" : before.join(":")) 
        + "::" 
        + (after.empty() ? "" : after.join(":"))
    else
      return hextets.join(":")
    end
  end

  fn ip_to_int(ip: string): list
    # For compatibility, returns a list of eight 16-bit integers
    return cidr_ipv6::ip_to_blocks(ip)
  end

  fn int_to_ip(ip_blocks: list): string
    return cidr_ipv6::blocks_to_ip(ip_blocks)
  end

  fn prefix_to_netmask(prefix_length: integer): list
    throw "Invalid prefix length: ${prefix_length}" 
      when prefix_length < 0 || prefix_length > 128

    var (mask_blocks = [0]*8)
    var (bits_left = prefix_length)

    for i in std::range(0, 8) do
      if bits_left >= 16
        mask_blocks[i] = 0xFFFF
        bits_left -= 16
      else
        # Set top bits_left bits in this 16-bit block
        mask_blocks[i] = (0xFFFF << (16 - bits_left)) & 0xFFFF
        bits_left = 0
      end
    end

    return mask_blocks
  end

  fn parse_cidr(cidr_block: string, parts: list = []): hashmap
    parts = cidr_block.split("/")
    throw "Invalid CIDR block: ${cidr_block}"
      when parts.size() != 2

    var (network_ip = cidr_ipv6::ip_to_blocks(parts.first()))
    var (prefix_length = parts.last().to_integer())
    var (netmask = cidr_ipv6::prefix_to_netmask(prefix_length))

    # Compute the network address
    var (network = [])
    for i in std::range(0, 8) do
      network.push(network_ip[i] & netmask[i])
    end

    return {
      "network": cidr_ipv6::blocks_to_ip(network),
      "prefix_length": prefix_length,
      "netmask": cidr_ipv6::blocks_to_ip(netmask)
    }
  end

  fn contains(ip: string, cidr_block: string): boolean
    var (ip_blocks = cidr_ipv6::ip_to_blocks(ip))
    var (cidr_info = cidr_ipv6::parse_cidr(cidr_block))
    var (network_blocks = cidr_ipv6::ip_to_blocks(cidr_info["network"]))
    var (prefix_length = cidr_info["prefix_length"])
    var (netmask = cidr_ipv6::prefix_to_netmask(prefix_length))

    for i in std::range(0, 8) do
      return false
        when (ip_blocks[i] & netmask[i]) != network_blocks[i]
    end

    return true
  end

  fn subnet(cidr_block: string, new_prefix_length: integer): list
    var (cidr_info = cidr_ipv6::parse_cidr(cidr_block))
    var (original_prefix_length = cidr_info["prefix_length"])
    var (network_blocks = cidr_ipv6::ip_to_blocks(cidr_info["network"]))

    throw "Invalid new prefix length: ${new_prefix_length}"
      when new_prefix_length <= original_prefix_length || new_prefix_length > 128

    var (diff = new_prefix_length - original_prefix_length)
    var (num_subnets = 1 << diff)

    fn blocks_to_128int(blocks: list): integer
      var (result: integer = 0)
      for b in blocks do
        result = (result << 16) | b
      end
      return result
    end

    fn int128_to_blocks(v: integer): list
      var (res = [0]*8)
      var (temp = v)
      for i in std::range(7, 1) do
        res[i] = temp & 0xFFFF
        temp = temp >>> 16
      end
      return res
    end

    var (base_int = blocks_to_128int(network_blocks))
    var (increment = 1 << (128 - new_prefix_length))
    var (subnets = [])

    for i in std::range(0, num_subnets) do
      var (subnet_int = base_int + (i * increment))
      var (subnet_blocks = int128_to_blocks(subnet_int))
      subnets.push(cidr_ipv6::blocks_to_ip(subnet_blocks) + "/" + new_prefix_length.to_string())
    end

    return subnets
  end
end

export "cidr_ipv6"

fn assert(condition: boolean, message: string)
  if !condition
    eprintln message
    throw message
  end
end

# Test Cases
fn test_cidr()
  println("--- Running CIDR Tests ---")
  
  # Test 1: Basic /24 CIDR block
  cidr_block = "192.168.1.0/24"
  cidr_info = cidr::parse_cidr(cidr_block)
  assert(cidr_info["network"] == "192.168.1.0", "Test 01a Failed: Network Address")
  assert(cidr_info["netmask"] == "255.255.255.0", "Test 01b Failed: Netmask")
  assert(cidr_info["broadcast"] == "192.168.1.255", "Test 01c Failed: Broadcast Address")
  
  range = cidr::range(cidr_block)
  assert(range["first_ip"] == "192.168.1.1", "Test 01d Failed: First IP")
  assert(range["last_ip"] == "192.168.1.254", "Test 01e Failed: Last IP")
  
  assert(cidr::contains("192.168.1.10", cidr_block), "Test 01f Failed: Contains 192.168.1.10")
  assert(!cidr::contains("192.168.2.1", cidr_block), "Test 01g Failed: Does Not Contain 192.168.2.1")
  
  # Test 2: /32 CIDR block
  cidr_block = "192.168.1.10/32"
  cidr_info = cidr::parse_cidr(cidr_block)
  assert(cidr_info["network"] == "192.168.1.10", "Test 02a Failed: Network Address")
  assert(cidr_info["netmask"] == "255.255.255.255", "Test 02b Failed: Netmask")
  assert(cidr_info["broadcast"] == "192.168.1.10", "Test 02c Failed: Broadcast Address")
  
  range = cidr::range(cidr_block)
  assert(range["first_ip"] == "192.168.1.10", "Test 02d Failed: First IP")
  assert(range["last_ip"] == "192.168.1.10", "Test 02e Failed: Last IP")
  
  assert(cidr::contains("192.168.1.10", cidr_block), "Test 02f Failed: Contains 192.168.1.10")
  assert(!cidr::contains("192.168.1.11", cidr_block), "Test 02g Failed: Does Not Contain 192.168.1.11")
  
  # Test 3: /0 CIDR block (all IPs)
  cidr_block = "0.0.0.0/0"
  cidr_info = cidr::parse_cidr(cidr_block)
  assert(cidr_info["network"] == "0.0.0.0", "Test 03a Failed: Network Address")
  assert(cidr_info["netmask"] == "0.0.0.0", "Test 03b Failed: Netmask")
  assert(cidr_info["broadcast"] == "255.255.255.255", "Test 03c Failed: Broadcast Address")
  
  range = cidr::range(cidr_block)
  assert(range["first_ip"] == "0.0.0.1", "Test 03d Failed: First IP")
  assert(range["last_ip"] == "255.255.255.254", "Test 03e Failed: Last IP")
  
  assert(cidr::contains("192.168.1.1", cidr_block), "Test 03f Failed: Contains Any IP")
  assert(cidr::contains("8.8.8.8", cidr_block), "Test 03g Failed: Contains Any IP")
  
  # Test 4: Cross-boundary IPs
  cidr_block = "10.0.0.0/8"
  assert(cidr::contains("10.255.255.255", cidr_block), "Test 04a Failed: Last IP in Range")
  assert(!cidr::contains("11.0.0.0", cidr_block), "Test 04b Failed: Outside Range")
  
  # Test 5: Invalid CIDR blocks
  passed = false
  try
    cidr::parse_cidr("192.168.1.0/33")
  catch
    passed = true
  end
  assert(passed, "Test 05a Failed: Invalid CIDR Block /33")
  
  passed = false
  try
    cidr::parse_cidr("192.168.1")
  catch
    passed = true
  end
  assert(passed, "Test 05b Failed: Invalid CIDR Block Missing Prefix")

  println("--- All Tests Passed! ---")
end

fn test_subnet()
  println("--- Running Subnet Tests ---")

  # Test 1: Subnet /24 into /26
  subnets = cidr::subnet("192.168.1.0/24", 26)
  assert(subnets.size() == 4, "Test 11a Failed: Number of /26 subnets")
  assert(subnets[0] == "192.168.1.0/26", "Test 11b Failed: First /26 subnet")
  assert(subnets[1] == "192.168.1.64/26", "Test 11c Failed: Second /26 subnet")

  # Test 2: Subnet /24 into /30
  subnets = cidr::subnet("192.168.1.0/24", 30)
  assert(subnets.size() == 64, "Test 12a Failed: Number of /30 subnets")
  assert(subnets[0] == "192.168.1.0/30", "Test 12b Failed: First /30 subnet")
  assert(subnets[63] == "192.168.1.252/30", "Test 12c Failed: Last /30 subnet")

  # Test 3: Invalid Subnet Splits
  passed = false
  try
    cidr::subnet("192.168.1.0/24", 24)
  catch
    passed = true
  end
  assert(passed, "Test 13a Failed: Invalid prefix equal to original")

  passed = false
  try
    cidr::subnet("192.168.1.0/24", 33)
  catch
    passed = true
  end
  assert(passed, "Test 13b Failed: Invalid prefix greater than 32")

  println("--- All Subnet Tests Passed ---")
end

fn test_cidr_ipv6()
  println("--- Running CIDR IPv6 Tests ---")
  
  # Test 1: Parsing a /64 CIDR block
  cidr_block = "2001:db8::/64"
  cidr_info = cidr_ipv6::parse_cidr(cidr_block)
  
  assert(cidr_info["network"] == "2001:db8::", "Test 21a Failed: Network Address")
  assert(cidr_info["netmask"] == "ffff:ffff:ffff:ffff::", "Test 21b Failed: Netmask")
  assert(cidr_info["prefix_length"] == 64, "Test 21c Failed: Prefix Length")
  
  # Test 2: Checking if an IP is in the CIDR block
  assert(cidr_ipv6::contains("2001:db8::1", cidr_block), "Test 22a Failed: Contains 2001:db8::1")
  assert(!cidr_ipv6::contains("2001:db9::", cidr_block), "Test 22b Failed: Does Not Contain 2001:db9::")
  
  # Test 3: Subnetting a /64 into /66
  subnets = cidr_ipv6::subnet(cidr_block, 66)
  assert(subnets.size() == 4, "Test 23a Failed: Number of Subnets for /66")
  assert(subnets[0] == "2001:db8::/66", "Test 23b Failed: First Subnet")
  assert(subnets[1] == "2001:db8::4000/66", "Test 23c Failed: Second Subnet")
  
  # Test 4: Parsing and subnetting /128
  cidr_block = "2001:db8::1/128"
  cidr_info = cidr_ipv6::parse_cidr(cidr_block)
  assert(cidr_info["network"] == "2001:db8::1", "Test 24a Failed: Network Address /128")
  assert(cidr_info["netmask"] == "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", "Test 24b Failed: Netmask /128")
  assert(cidr_info["prefix_length"] == 128, "Test 24c Failed: Prefix Length /128")
  
  # Test 5: Invalid CIDR blocks
  passed = false
  try
    cidr_ipv6::parse_cidr("2001:db8::/129")
  catch
    passed = true
  end
  assert(passed, "Test 25a Failed: Invalid Prefix Length /129")
  
  passed = false
  try
    cidr_ipv6::parse_cidr("2001:db8::")
  catch
    passed = true
  end
  assert(passed, "Test 25b Failed: Missing Prefix Length")
  
  println("--- All CIDR IPv6 Tests Passed! ---")
end

test_cidr()
test_subnet()
test_cidr_ipv6()