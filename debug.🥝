# a script for debugging and experimentation (and fun!)

fn assert(cond: boolean, msg: string = "Assertion failed")
  if !cond
    eprintln msg
    return 1
  end
  
  return 0
end

fn var_decl_one()
  var (
    f: float = 0.5,            # type-hint with initializer 
    s = "string",              # regular variable declaration
    n,                         # uninitialized variable defaults to null
    b: boolean,                # type-hint without initializer (`boolean` defaults to false)
    m: list = [[0] * 5] * 5,   # a 5x5 matrix for funsies
    l: list,                   # will be an empty list
    h: hashmap,                # will be an empty hashmap
    i: integer                 # will be 0
  )

  return [f, s, n, b, m, l, h, i]
end

fn var_decl_two()
  var (f: float = 0.5)          # type-hint with initializer 
  var (s = "string")            # regular variable declaration
  var (n)                       # uninitialized variable defaults to null
  var (b: boolean)              # type-hint without initializer (`boolean` defaults to false)
  var (m: list = [[0] * 5] * 5) # a 5x5 matrix for funsies
  var (l: list)                 # will be an empty list
  var (h: hashmap)              # will be an empty hashmap
  var (i: integer)              # will be 0

  return [f, s, n, b, m, l, h, i]
end

# declare the variables one and two
var (one = var_decl_one())
var (two = var_decl_two())

var (err_c: integer) # an error counter

err_c += assert(one == two, "the results did not match")

for i in std::range(0, one.size()) do
  err_c += assert(one[i] == two[i], "the results do not match: ${one[i]} != ${two[i]}")
end

if err_c == 0
  println "all assertions passed!"
end

/# interesting syntax, but will require some more work (for the future!)
var (assert: lambda = (with (cond, msg = "Assertion failed") do
  if !cond
    eprintln msg
  end
end))
#/